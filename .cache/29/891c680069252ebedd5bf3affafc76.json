{"id":"content/blog/genetic.js","dependencies":[{"name":"/home/ericloux/Desktop/code/portfolio/package.json","includedInParent":true,"mtime":1565309385158}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.genetic = genetic;\n\nfunction genetic() {\n  var content = \"\";\n  content += \"   \\n    <h3>\\n        Genetic Algorithms\\n    </h3>\\n\\n    In my opinion, one of the most exciting and intriguing developments in computer science is that of genetic algorithms. A genetic algorithm \\n    creates a program, but \\n    instead of having a human type out every line of code, the computer writes the program itself.You might be asking yourself how the heck that \\n    works and wondering if it's going to end up with the Terminator coming back \\n    in time for you, but that's not the case at all! Instead, the programmer \\n    takes inspiration from something that is all around us - genetics.<br><br>\\n\\n    Now, some people are immediately put off by the term genetics, even though evolution has been accepted by the Catholic Church since 1950. The \\n    \\\"genes\\\" in genetic algorithms are not exactly the same concept as those found in DNA. However, the concept can be applied to computer code \\n    through clever adaptation.<br><br>\\n\\n    Here's an incredibly simplified overview of how genes work organisms. A strand of DNA serves as a blueprint, attracting amino acids to its end. \\n    From there, the amino acids move along the strand of DNA, combining with other amino acids and eventually creating a molecule. This molecule \\n    then separates and interacts with the other molecules in the organism \\n    to form just about every possible type of organic matter. The DNA splits in half during \\n    this process, and then each half can regenerate the other half and you're left with two identical strands of DNA. (Somewhere, a geneticist is \\n    weeping after reading this.)<br><br>\\n\\n    When two organisims reproduce, the genetic material can combine as well. Portions of each of the parents' genes are mixed with portions of the \\n    others. Likewise, sometimes a perfect copy isn't created when a strand splits. This is known as a mutation, and can happen from something as \\n    common as solar radiation hitting the point where the genes are splitting. Of course, that can completely change what the genes create!<br><br>\\n\\n    Reproducing this in computers is easier than you might think. \\n    First, you need to come up with a way to represent the commands you want your program to be able to use. \\n    From there, you write a program that can create those genes (the genotype), as well as test them out (the phenotype). The quintessential example \\n    is, of course, creating a simulated organism. Instead of having the genes create physical material, they might instead represent traits, such as \\n    ability to sense other organisms. In this example, the genotype is the actual genes to create the creature, while the phenotype is how those \\n    creatures interact with each other in whatever environment they're put into.<br><br>\\n\\n    These two terms - genotype and phenotype - are incredibly important to understanding of how genetic algorithms work. The genotype is the string \\n    of instructions. The phenotype is what is created as a result of those instructions. For example, in nature, the DNA is the genotype, and the \\n    molecule is the phenotype. I'll be using these terms a lot moving forward. <br><br>\\n\\n    Once the genotype and phenotype are specified, a way to determine which organism is best is determined. This quantity is known as its \\n    fitness. In our organism example, it may be \\n    the organism that gets the most food, or lives the longest. Orgamisms with higher fitness are more likely to be selected to have their genes \\n    passed on to the next generation. This is done by mixing and mutating genes as described earlier. From that process, \\n    we end up with a completely new \\n    generation, which is then put through the test again and the entire process repeats.<br><br>\\n\\n    Genetic algorithms can solve a variety of problems that humans just aren't good at. Instead of plodding through case after case of trial by \\n    error, a programmer can have a program that tests a hundred cases at once, chooses the best solutions, and then continues refining bit by bit \\n    until the problem is solved. <br><br>\\n\\n    I had previously created a genetic algorithm, but the implementation was lacking a bit. Since then, I've been wanting to give it another shot. \\n    To that end, I'm writing this series of blog entries to document and share the process. Next time, I'll be outlining some of what I'm planning \\n    to aim for.<br><br><br><br>\\n    \";\n  document.getElementsByClassName(\"content\")[0].innerHTML = content;\n}"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"content/blog/genetic.js","original":{"line":1,"column":0}},{"name":"genetic","generated":{"line":8,"column":9},"source":"content/blog/genetic.js","original":{"line":1,"column":9}},{"generated":{"line":8,"column":16},"source":"content/blog/genetic.js","original":{"line":1,"column":0}},{"generated":{"line":8,"column":19},"source":"content/blog/genetic.js","original":{"line":1,"column":19}},{"generated":{"line":9,"column":0},"source":"content/blog/genetic.js","original":{"line":2,"column":4}},{"name":"content","generated":{"line":9,"column":6},"source":"content/blog/genetic.js","original":{"line":2,"column":8}},{"generated":{"line":9,"column":13},"source":"content/blog/genetic.js","original":{"line":2,"column":15}},{"generated":{"line":9,"column":16},"source":"content/blog/genetic.js","original":{"line":2,"column":18}},{"generated":{"line":9,"column":18},"source":"content/blog/genetic.js","original":{"line":2,"column":4}},{"name":"content","generated":{"line":10,"column":0},"source":"content/blog/genetic.js","original":{"line":4,"column":4}},{"name":"content","generated":{"line":10,"column":2},"source":"content/blog/genetic.js","original":{"line":4,"column":4}},{"generated":{"line":10,"column":9},"source":"content/blog/genetic.js","original":{"line":4,"column":11}},{"generated":{"line":10,"column":4459},"source":"content/blog/genetic.js","original":{"line":4,"column":4}},{"name":"document","generated":{"line":11,"column":0},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"name":"document","generated":{"line":11,"column":2},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"generated":{"line":11,"column":10},"source":"content/blog/genetic.js","original":{"line":58,"column":12}},{"name":"getElementsByClassName","generated":{"line":11,"column":11},"source":"content/blog/genetic.js","original":{"line":58,"column":13}},{"generated":{"line":11,"column":33},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"generated":{"line":11,"column":34},"source":"content/blog/genetic.js","original":{"line":58,"column":36}},{"generated":{"line":11,"column":43},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"generated":{"line":11,"column":45},"source":"content/blog/genetic.js","original":{"line":58,"column":47}},{"generated":{"line":11,"column":46},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"name":"innerHTML","generated":{"line":11,"column":48},"source":"content/blog/genetic.js","original":{"line":58,"column":50}},{"generated":{"line":11,"column":57},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"name":"content","generated":{"line":11,"column":60},"source":"content/blog/genetic.js","original":{"line":58,"column":62}},{"generated":{"line":11,"column":67},"source":"content/blog/genetic.js","original":{"line":58,"column":4}},{"generated":{"line":12,"column":0},"source":"content/blog/genetic.js","original":{"line":59,"column":1}}],"sources":{"content/blog/genetic.js":"function genetic() {\n    let content = \"\";\n\n    content += `   \n    <h3>\n        Genetic Algorithms\n    </h3>\n\n    In my opinion, one of the most exciting and intriguing developments in computer science is that of genetic algorithms. A genetic algorithm \n    creates a program, but \n    instead of having a human type out every line of code, the computer writes the program itself.You might be asking yourself how the heck that \n    works and wondering if it's going to end up with the Terminator coming back \n    in time for you, but that's not the case at all! Instead, the programmer \n    takes inspiration from something that is all around us - genetics.<br><br>\n\n    Now, some people are immediately put off by the term genetics, even though evolution has been accepted by the Catholic Church since 1950. The \n    \"genes\" in genetic algorithms are not exactly the same concept as those found in DNA. However, the concept can be applied to computer code \n    through clever adaptation.<br><br>\n\n    Here's an incredibly simplified overview of how genes work organisms. A strand of DNA serves as a blueprint, attracting amino acids to its end. \n    From there, the amino acids move along the strand of DNA, combining with other amino acids and eventually creating a molecule. This molecule \n    then separates and interacts with the other molecules in the organism \n    to form just about every possible type of organic matter. The DNA splits in half during \n    this process, and then each half can regenerate the other half and you're left with two identical strands of DNA. (Somewhere, a geneticist is \n    weeping after reading this.)<br><br>\n\n    When two organisims reproduce, the genetic material can combine as well. Portions of each of the parents' genes are mixed with portions of the \n    others. Likewise, sometimes a perfect copy isn't created when a strand splits. This is known as a mutation, and can happen from something as \n    common as solar radiation hitting the point where the genes are splitting. Of course, that can completely change what the genes create!<br><br>\n\n    Reproducing this in computers is easier than you might think. \n    First, you need to come up with a way to represent the commands you want your program to be able to use. \n    From there, you write a program that can create those genes (the genotype), as well as test them out (the phenotype). The quintessential example \n    is, of course, creating a simulated organism. Instead of having the genes create physical material, they might instead represent traits, such as \n    ability to sense other organisms. In this example, the genotype is the actual genes to create the creature, while the phenotype is how those \n    creatures interact with each other in whatever environment they're put into.<br><br>\n\n    These two terms - genotype and phenotype - are incredibly important to understanding of how genetic algorithms work. The genotype is the string \n    of instructions. The phenotype is what is created as a result of those instructions. For example, in nature, the DNA is the genotype, and the \n    molecule is the phenotype. I'll be using these terms a lot moving forward. <br><br>\n\n    Once the genotype and phenotype are specified, a way to determine which organism is best is determined. This quantity is known as its \n    fitness. In our organism example, it may be \n    the organism that gets the most food, or lives the longest. Orgamisms with higher fitness are more likely to be selected to have their genes \n    passed on to the next generation. This is done by mixing and mutating genes as described earlier. From that process, \n    we end up with a completely new \n    generation, which is then put through the test again and the entire process repeats.<br><br>\n\n    Genetic algorithms can solve a variety of problems that humans just aren't good at. Instead of plodding through case after case of trial by \n    error, a programmer can have a program that tests a hundred cases at once, chooses the best solutions, and then continues refining bit by bit \n    until the problem is solved. <br><br>\n\n    I had previously created a genetic algorithm, but the implementation was lacking a bit. Since then, I've been wanting to give it another shot. \n    To that end, I'm writing this series of blog entries to document and share the process. Next time, I'll be outlining some of what I'm planning \n    to aim for.<br><br><br><br>\n    `;\n\n    document.getElementsByClassName(\"content\")[0].innerHTML = content;\n}\n\nexport {genetic};"},"lineCount":null}},"error":null,"hash":"c6ff0262d5a93271def83aa507d09149","cacheData":{"env":{}}}